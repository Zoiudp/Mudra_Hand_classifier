import requests
import json

url = 'http://localhost:5000/predict-mudra'

# Dados originais
raw_data = "172.7464,0.006902086,1.066257,0.08354144,-0.966749,0.0277661,0.1111569,0.2286253,5.960464e-08,0.2000026,0.2509815,0.0,0.5688137,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.7586,0.007332,1.066159,0.08363057,-0.9668469,0.02892216,0.1095725,0.2288326,5.960464e-08,0.1973035,0.2483404,0.0,0.5685248,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.7771,0.007576786,1.066083,0.08382761,-0.9668723,0.03080674,0.1085261,0.2289782,5.960464e-08,0.196343,0.2474007,0.0,0.5684214,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.7962,0.007548163,1.066018,0.08404602,-0.9668871,0.03306123,0.107605,0.229036,5.960464e-08,0.2152144,0.2460468,0.0,0.5727267,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.8088,0.007293631,1.065314,0.08419406,-0.9677067,0.03331536,0.1136125,0.2225445,5.960464e-08,0.221936,0.2455652,0.0,0.5742604,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.8197,0.00729937,1.065145,0.08425719,-0.9680325,0.03463981,0.1149812,0.2202103,5.960464e-08,0.2272979,0.2451799,0.0,0.5754885,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.8337,0.007772974,1.065274,0.08408523,-0.9685884,0.03665201,0.115329,0.2172382,5.960464e-08,0.2315788,0.2448716,0.0,0.5764717,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.8468,0.01100215,1.06413,0.08071005,-0.969514,0.03845312,0.1154799,0.2126696,5.960464e-08,0.2377309,0.2444276,0.0,0.5778888,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.8662,0.01095581,1.064372,0.07776426,-0.9704455,0.04313006,0.1149908,0.2077321,5.960464e-08,0.2416615,0.2441433,0.0,0.5787966,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.8755,0.01050871,1.064293,0.07789099,-0.9705954,0.04429505,0.1146777,0.2069582,5.960464e-08,0.2416615,0.2441433,0.0,0.5787966,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.8899,0.009741417,1.064367,0.07824831,-0.9709482,0.04660049,0.1138014,0.2052735,5.960464e-08,0.2441746,0.2439614,0.0,0.5793778,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.9082,0.00982877,1.064508,0.07862431,-0.9710044,0.04858981,0.111353,0.2058882,5.960464e-08,0.2563798,0.2483351,0.0,0.5845726,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.9232,0.009578149,1.064671,0.07936006,-0.9711628,0.04835217,0.1122224,0.2047218,5.960464e-08,0.2738729,0.2546195,0.0,0.5920874,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.9378,0.01056434,1.064854,0.08011927,-0.9709722,0.04492884,0.1141741,0.2053258,5.960464e-08,0.2800736,0.2568506,0.0,0.5947693,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.9491,0.01075779,1.064925,0.08051311,-0.9710588,0.04359295,0.1144706,0.205039,5.960464e-08,0.2850294,0.2586343,0.0,0.5969186,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.9722,0.01124614,1.064668,0.08069398,-0.971519,0.03826062,0.1127463,0.2048788,5.960464e-08,0.2947718,0.2621133,0.0,0.601124,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.9821,0.0114733,1.064501,0.08081727,-0.9716675,0.03649984,0.1122745,0.2047547,5.960464e-08,0.2968137,0.2628428,0.0,0.6020081,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n172.991,0.01182362,1.06419,0.0809809,-0.9720361,0.03374356,0.110729,0.204319,5.960464e-08,0.2984465,0.2634264,0.0,0.6027157,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n173.0048,0.01200705,1.064081,0.08120103,-0.9723681,0.03098567,0.1093216,0.2039336,5.960464e-08,0.2997523,0.2638932,0.0,0.603282,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n173.019,0.01219268,1.063972,0.08142546,-0.972773,0.02751,0.1075464,0.2034449,5.960464e-08,0.3007967,0.2642666,0.0,0.6037353,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n173.0328,0.01262973,1.062608,0.08105421,-0.9732231,0.0309568,0.1052396,0.2019977,5.960464e-08,0.3023002,0.2648042,0.0,0.6043885,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0"



# Processar os dados para extrair apenas as colunas necessárias
processed_lines = []
lines = raw_data.split("\n")

# Verificar se temos linhas suficientes
if len(lines) < 20:
    print(f"Atenção: Temos apenas {len(lines)} linhas, mas o modelo espera 20!")

# Para cada linha, extrair apenas as 12 primeiras colunas que são relevantes para o modelo
for line in lines:
    # Dividir a linha em valores
    values = line.split(",")
    
    # Time + 11 features = primeiras 12 colunas
    # R_PositionX,Y,Z + R_RotationX,Y,Z,W + R_CurlIndex,Middle,Ring,Pinky,Thumb
    relevant_values = values[:12]
    
    # Juntar novamente como string CSV
    processed_line = ",".join(relevant_values)
    processed_lines.append(processed_line)

# Juntar todas as linhas processadas
processed_data = "\n".join(processed_lines)

# Enviar a requisição
headers = {'Content-Type': 'text/plain'}
try:
    response = requests.post(url, data=processed_data, headers=headers)
    
    # Verificar se a resposta foi bem-sucedida
    if response.status_code == 200:
        print("Resposta do servidor:")
        print(response.json())
    else:
        print(f"Erro: Status code {response.status_code}")
        print(response.text)
except Exception as e:
    print(f"Erro ao fazer a requisição: {e}")

# Versão simplificada alternativa (enviar todas as colunas)
def send_unprocessed_data():
    simple_data = fixed_data  # Apenas corrigimos o separador de linha
    
    try:
        response = requests.post(url, data=simple_data, headers=headers)
        if response.status_code == 200:
            print("\nResposta com dados completos:")
            print(response.json())
        else:
            print(f"\nErro com dados completos: Status code {response.status_code}")
            print(response.text)
    except Exception as e:
        print(f"\nErro ao enviar dados completos: {e}")

# Descomente para tentar enviar os dados completos também
# send_unprocessed_data()